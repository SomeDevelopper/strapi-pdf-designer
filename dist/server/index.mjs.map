{"version":3,"file":"index.mjs","sources":["../../server/src/config/index.ts","../../server/src/bootstrap.ts","../../server/src/content-types/pdf-template/index.ts","../../server/src/content-types/index.ts","../../server/src/controllers/designer.ts","../../server/src/controllers/config.ts","../../server/src/controllers/pdf.ts","../../server/src/controllers/index.ts","../../server/src/destroy.ts","../../server/src/middlewares/index.ts","../../server/src/policies/index.ts","../../server/src/register.ts","../../server/src/routes/index.ts","../../server/src/services/template.ts","../../server/src/services/config.ts","../../server/src/services/pdf.ts","../../server/src/services/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { EmailEditorProps } from \"react-email-editor\";\n\nexport type EmailConfig = Pick<\n  NonNullable<EmailEditorProps[\"options\"]>,\n  | \"projectId\"\n  | \"locale\"\n  | \"appearance\"\n  | \"user\"\n  | \"mergeTags\"\n  | \"designTags\"\n  | \"specialLinks\"\n  | \"tools\"\n  | \"blocks\"\n  | \"fonts\"\n  | \"safeHtml\"\n  | \"customCSS\"\n  | \"customJS\"\n  | \"textDirection\"\n>;\n\nexport default {\n  default: () =>\n    ({\n      mergeTagsConfig: {\n        autocompleteTriggerChar: \"@\",\n        sort: false,\n        delimiter: [\"{{\", \"}}\"],\n      },\n      appearance: {\n        theme: \"modern_light\",\n      },\n      fonts: {\n        showDefaultFonts: false,\n      },\n      tools: {\n        image: {\n          properties: {\n            src: {\n              value: {\n                url: \"https://picsum.photos/600/350\",\n              },\n            },\n          },\n        },\n      },\n      mergeTags: {\n        core: {\n          name: \"Core\",\n          mergeTags: {\n            // Values that can be used in the Reset Password context\n            resetPassword: {\n              name: \"Reset Password\",\n              mergeTags: {\n                // User in the Reset Password context\n                user: {\n                  name: \"USER\",\n                  mergeTags: {\n                    username: {\n                      name: \"Username\",\n                      value: \"{{= USER.username }}\",\n                      sample: \"john_doe\",\n                    },\n                    email: {\n                      name: \"Email\",\n                      value: \"{{= USER.email }}\",\n                      sample: \"johndoe@example.com\",\n                    },\n                  },\n                },\n                token: {\n                  name: \"TOKEN\",\n                  value: \"{{= TOKEN }}\",\n                  sample: \"corresponds-to-the-token-generated-to-be-able-to-reset-the-password\",\n                },\n                url: {\n                  name: \"URL\",\n                  value: \"{{= URL }}\",\n                  sample: \"is-the-link-where-the-user-will-be-redirected-after-clicking-on-it-in-the-email\",\n                },\n                serverUrl: {\n                  name: \"SERVER_URL\",\n                  value: \"{{= SERVER_URL }}\",\n                  sample: \"is-the-absolute-server-url-(configured-in-server-configuration)\",\n                },\n              },\n            },\n            // Values that can be used in the Email Addres Confirmation context\n            addressConfirmation: {\n              name: \"Confirm Address\",\n              mergeTags: {\n                // User in the Email Address Confirmation context\n                user: {\n                  name: \"USER\",\n                  mergeTags: {\n                    username: {\n                      name: \"Username\",\n                      value: \"{{= USER.username }}\",\n                      sample: \"john_doe\",\n                    },\n                    email: {\n                      name: \"Email\",\n                      value: \"{{= USER.email }}\",\n                      sample: \"johndoe@example.com\",\n                    },\n                  },\n                },\n                code: {\n                  name: \"CODE\",\n                  value: \"{{= CODE }}\",\n                  sample: \"corresponds-to-the-CODE-generated-to-be-able-confirm-the-user-email\",\n                },\n                url: {\n                  name: \"URL\",\n                  value: \"{{= URL }}\",\n                  sample:\n                    \"is-the-Strapi-backend-URL-that-confirms-the-code-(by-default-/auth/email-confirmation)\",\n                },\n                serverUrl: {\n                  name: \"SERVER_URL\",\n                  value: \"{{= SERVER_URL }}\",\n                  sample: \"is-the-absolute-server-url-(configured-in-server-configuration)\",\n                },\n              },\n            },\n          },\n        },\n        mustache: {\n          name: \"Mustache\",\n          mergeTags: {\n            basic: {\n              name: \"Basic Output\",\n              mergeTags: {\n                raw: {\n                  name: \"Display Raw Content\",\n                  value: \"{{{REPLACE_ME}}}\",\n                },\n                output: {\n                  name: \"Regular Output\",\n                  value: \"{{REPLACE_ME}}\",\n                },\n                dottedOutput: {\n                  name: \"Dot notation for Output\",\n                  value: \"{{REPLACE_ME.NESTED_VALUE}}\",\n                },\n              },\n            },\n            loops: {\n              name: \"Loops\",\n              mergeTags: {\n                raw: {\n                  name: \"Display Raw Content in Loop\",\n                  value: \"{{#ARRAY_OR_OBJECT_TO_ITERATE}}\\n{{{REPLACE_ME}}}\\n{{/ARRAY_OR_OBJECT_TO_ITERATE}}\",\n                },\n                output: {\n                  name: \"Regular Output in Loop\",\n                  value: \"{{#ARRAY_OR_OBJECT_TO_ITERATE}}\\n{{REPLACE_ME}}\\n{{/ARRAY_OR_OBJECT_TO_ITERATE}}\",\n                },\n                dottedOutput: {\n                  name: \"Dot notation for Output in Loop\",\n                  value:\n                    \"{{#ARRAY_OR_OBJECT_TO_ITERATE}}\\n{{REPLACE_ME.NESTED_VALUE}}\\n{{/ARRAY_OR_OBJECT_TO_ITERATE}}\",\n                },\n              },\n            },\n          },\n        },\n      },\n    }) as EmailConfig,\n  validator() {},\n  /** The name of the strapi plugin\n   *\n   * @default \"pdf-designer-5\"\n   */\n  pluginName: \"pdf-designer-5\",\n};\n","import type { Core } from '@strapi/strapi';\nimport config from \"./config\"\n\nconst bootstrap = async ({ strapi }: { strapi: Core.Strapi }) => {\n  const actions = [\n    {\n      section: \"plugins\",\n      displayName: \"Allow access to the PDF Designer interface\",\n      uid: \"menu-link\",\n      pluginName: config.pluginName,\n    },\n  ];\n  await strapi.admin.services.permission.actionProvider.registerMany(actions);\n};\n\nexport default bootstrap;\n","import schema from './schema.json';\n\nexport default {\n  schema\n};\n","import pdfTemplate from './pdf-template';\n\nexport default {\n  'pdf-template': pdfTemplate,\n};\n","import _ from \"lodash\";\nimport { htmlToText } from \"html-to-text\";\nimport { isNil } from \"lodash\";\nimport configImport from \"../config\";\nimport type { Core } from \"@strapi/strapi\";\n\n/**\n * email-designer.js controller\n *\n * @description: A set of functions called \"actions\" of the `email-designer` plugin.\n */\n\nexport default {\n  /**\n   * Get template design action.\n   *\n   * @return {Object}\n   */\n  getTemplates: async (ctx) => {\n    const templates = await strapi.plugin(configImport.pluginName).service(\"template\").findMany();\n    ctx.send(templates);\n  },\n\n  /**\n   * Get template design action.\n   *\n   * @return {Object}\n   */\n  getTemplate: async (ctx) => {\n    if(!ctx.params.templateId){\n      console.log('No template ID specified')\n      throw Error\n    }\n    try {\n      const template = await strapi\n        .plugin(configImport.pluginName)\n        .service(\"template\")\n        .findOne({ id: ctx.params.templateId });\n      ctx.send(template);\n    } catch (error) {\n      console.log(error)\n    }\n  },\n\n  /**\n   * Delete template design action.\n   *\n   * @return {Object}\n   */\n  deleteTemplate: async (ctx) => {\n    if (!ctx.params.templateId) {\n      console.log('No template ID specified')\n      throw Error\n    }\n    try {\n      await strapi\n        .plugin(configImport.pluginName)\n        .service(\"template\")\n        .delete({ id: ctx.params.templateId });\n      ctx.send({ removed: true });\n    } catch (error) {\n      console.log(error)\n    }\n    \n  },\n\n  /**\n   * Save template design action.\n   *\n   * @return {Object}\n   */\n  saveTemplate: async (ctx) => {\n    let { templateId } = ctx.params;\n    if(!templateId) {\n      console.log('No template ID specified')\n      throw Error\n    }\n\n    const { templateReferenceId, import: importTemplate } = ctx.request.body;\n\n    if (importTemplate === true) {\n      if (!isNil(templateReferenceId)) {\n        const foundTemplate = await strapi\n          .plugin(configImport.pluginName)\n          .service(\"template\")\n          .findOne({\n            templateReferenceId,\n          });\n\n        if (!_.isEmpty(foundTemplate)) {\n          if (templateId === \"new\")\n            return ctx.badRequest(\"Template reference ID is already taken\");\n\n          // override the existing entry with imported data\n          templateId = foundTemplate.id;\n        } else {\n          templateId = \"new\";\n        }\n      } else {\n        templateId = \"new\";\n      }\n    }\n\n    try {\n      const template =\n        templateId === \"new\"\n          ? await strapi\n              .plugin(configImport.pluginName)\n              .service(\"template\")\n              .create(ctx.request.body)\n          : await strapi\n              .plugin(configImport.pluginName)\n              .service(\"template\")\n              .update({ id: templateId }, ctx.request.body);\n\n      ctx.send(template || {});\n    } catch (error) {\n      ctx.badRequest(null, error);\n      console.log(error)\n    }\n  },\n\n  /**\n   * Duplicate a template.\n   *\n   * @return {Object}\n   */\n  duplicateTemplate: async (ctx) => {\n    if (_.isEmpty(ctx.params.sourceTemplateId)) {\n      console.log('No souce template ID given')\n      return ctx.badRequest(\"No source template Id given\");\n    }\n\n    const { __v, _id, id, updatedAt, createdAt, ...toClone } = await strapi\n      .plugin(configImport.pluginName)\n      .service(\"template\")\n      .findOne({ id: ctx.params.sourceTemplateId });\n\n    if (toClone) {\n      return strapi\n        .plugin(configImport.pluginName)\n        .service(\"template\")\n        .create({\n          ...toClone,\n          name: `${toClone.name} copy`,\n          templateReferenceId: null,\n        });\n    }\n    return null;\n  },\n\n  /**\n   * Strapi's core templates\n   */\n\n  /**\n   * Get strapi's core message template action.\n   *\n   * @return {Object}\n   */\n  getCoreEmailType: async (ctx) => {\n    const { coreEmailType } = ctx.params;\n    if (\n      ![\"user-address-confirmation\", \"reset-password\"].includes(coreEmailType)\n    ) {\n      console.log('No valid core message key')\n      return ctx.badRequest(\"No valid core message key\");\n    }\n    const pluginStoreEmailKey =\n      coreEmailType === \"user-address-confirmation\"\n        ? \"email_confirmation\"\n        : \"reset_password\";\n\n    const pluginStore = await strapi.store({\n      environment: \"\",\n      type: \"plugin\",\n      name: \"users-permissions\",\n    });\n\n    let data = await pluginStore\n      .get({ key: \"email\" })\n      .then((storeEmail) => storeEmail[pluginStoreEmailKey]);\n\n    data = {\n      ...(data && data.options\n        ? {\n            from: data.options.from,\n            message: data.options.message,\n            subject: data.options.object\n              .replace(/<%|&#x3C;%/g, \"{{\")\n              .replace(/%>|%&#x3E;/g, \"}}\"),\n            bodyHtml: data.options.message\n              .replace(/<%|&#x3C;%/g, \"{{\")\n              .replace(/%>|%&#x3E;/g, \"}}\"),\n            bodyText: htmlToText(\n              data.options.message\n                .replace(/<%|&#x3C;%/g, \"{{\")\n                .replace(/%>|%&#x3E;/g, \"}}\"),\n              {\n                wordwrap: 130,\n                trimEmptyLines: true,\n                uppercaseHeadings: false,\n              }\n            ),\n          }\n        : {}),\n      coreEmailType,\n      design: data.design,\n    };\n    ctx.send(data);\n  },\n\n  /**\n   * Save strapi's core message template action.\n   *\n   * @return {Object}\n   */\n  saveCoreEmailType: async (ctx) => {\n    const { coreEmailType } = ctx.params;\n    if (\n      ![\"user-address-confirmation\", \"reset-password\"].includes(coreEmailType)\n    ) {\n      console.log('No valide core message key')\n      return ctx.badRequest(\"No valid core message key\");\n    }\n    const pluginStoreEmailKey =\n      coreEmailType === \"user-address-confirmation\"\n        ? \"email_confirmation\"\n        : \"reset_password\";\n\n    const pluginStore = await strapi.store({\n      environment: \"\",\n      type: \"plugin\",\n      name: \"users-permissions\",\n    });\n\n    const emailsConfig = await pluginStore.get({ key: \"email\" });\n    if(!emailsConfig) {\n      console.log('An error has occured when getting email config')\n      return\n    }\n    const config = strapi.plugin(\"pdf-designer\").services.config.getConfig();\n\n    emailsConfig[pluginStoreEmailKey] = {\n      ...emailsConfig[pluginStoreEmailKey],\n      options: {\n        ...(emailsConfig[pluginStoreEmailKey]\n          ? emailsConfig[pluginStoreEmailKey].options\n          : {}),\n        message: ctx.request.body.message\n          .replace(/{{/g, \"<%\")\n          .replace(/}}/g, \"%>\"),\n        object: ctx.request.body.subject\n          .replace(/{{/g, \"<%\")\n          .replace(/}}/g, \"%>\"),\n        // TODO: from: ctx.request.from,\n        // TODO: response_email: ctx.request.response_email,\n      },\n      design: ctx.request.body.design,\n    };\n    try {\n      await pluginStore.set({ key: \"email\", value: emailsConfig });\n      ctx.send({ message: \"Saved\" });\n    }catch (error) {\n      console.log(error)\n    }\n  },\n};\n","import { Core } from '@strapi/strapi';\nimport configImport from \"../config\";\n\nexport interface ConfigController {\n  getConfig(ctx: any): Promise<void>;\n  getFullConfig(ctx: any): Promise<void>;\n}\n\nconst controller = ({ strapi }: { strapi: Core.Strapi }): ConfigController => ({\n  getConfig: async (ctx) => {\n    const { configKey } = ctx.params;\n    const config = await strapi.plugin(configImport.pluginName).service(\"config\").getConfig(configKey);\n    ctx.send(config);\n  },\n  getFullConfig: async (ctx) => {\n    const config = await strapi.config.get(`plugin::${configImport.pluginName}`);\n    ctx.send(config);\n  },\n  \n});\n\nexport default controller;","import _ from \"lodash\";\nimport { htmlToText } from \"html-to-text\";\nimport { isNil } from \"lodash\";\nimport configImport from \"../config\";\nimport type { Core } from \"@strapi/strapi\";\n\n/**\n * email-designer.js controller\n *\n * @description: A set of functions called \"actions\" of the `email-designer` plugin.\n */\n\nexport default {\n  /**\n   * Get template design action.\n   *\n   * @return {Object}\n   */\n  getTemplates: async (ctx) => {\n    const templates = await strapi.plugin(configImport.pluginName).service(\"template\").findMany();\n    ctx.send(templates);\n  },\n\n  /**\n   * Get template design action.\n   *\n   * @return {Object}\n   */\n  getTemplate: async (ctx) => {\n    if(!ctx.params.templateId){\n      console.log('No template ID specified')\n      throw Error\n    }\n    try {\n      const template = await strapi\n        .plugin(configImport.pluginName)\n        .service(\"template\")\n        .findOne({ id: ctx.params.templateId });\n      ctx.send(template);\n    } catch (error) {\n      console.log(error)\n    }\n  },\n\n  generate: async (ctx) => {\n    try {\n        const { templateReferenceId } = ctx.params;  // Récupère l'ID depuis l'URL\n        const { data, footerString } = ctx.request.body;  // Données supplémentaires à envoyer dans le corps de la requête\n  \n        if (!templateReferenceId) {\n          return ctx.throw(400, 'templateReferenceId is required');\n        }\n  \n        const pdfTemplate = { templateReferenceId };\n        const data1 = { data }\n        const myFooter = { footerString };\n  \n        // Appel au service `generatePdf` pour générer le PDF\n        const pdfBuffer = await strapi\n          .plugin('pdf-designer-5')\n          .service('pdf')\n          .generatePdf(pdfTemplate, data1, myFooter);\n  \n        // Retourner le PDF en tant que réponse\n        ctx.set('Content-Type', 'application/pdf');\n        ctx.send(pdfBuffer);\n  \n    } catch (error) {\n        strapi.log.error(error);\n        // ctx.throw(500, error.message);\n    }\n  }\n\n};\n","import designer from './designer';\nimport config from './config';\nimport pdf from './pdf';\n\nexport default {\n  config,\n  designer,\n  pdf,\n};\n","import type { Core } from '@strapi/strapi';\n\nconst destroy = ({ strapi }: { strapi: Core.Strapi }) => {\n  // destroy phase\n};\n\nexport default destroy;\n","export default {};\n","export default {};\n","import type { Core } from '@strapi/strapi';\n\nconst register = ({ strapi }: { strapi: Core.Strapi }) => {\n  // register phase\n};\n\nexport default register;\n","export default [\n  {\n    method: 'GET',\n    path: '/templates',\n    handler: 'designer.getTemplates',\n    config: { policies: [], auth: false  },\n  },\n  {\n    method: 'GET',\n    path: '/templates/:templateId',\n    handler: 'designer.getTemplate',\n    config: { policies: [], auth: false  },\n  },\n  {\n    method: 'POST',\n    path: '/templates/:templateId',\n    handler: 'designer.saveTemplate',\n    config: { policies: [], auth: false  },\n  },\n  {\n    method: 'DELETE',\n    path: '/templates/:templateId',\n    handler: 'designer.deleteTemplate',\n    config: { policies: [], auth: false  },\n  },\n  {\n    method: 'POST',\n    path: '/templates/duplicate/:sourceTemplateId',\n    handler: 'designer.duplicateTemplate',\n    config: { policies: [], auth: false  },\n  },\n  {\n    method: 'GET',\n    path: '/config/:configKey',\n    handler: 'config.getConfig',\n    config: { policies: [], auth: false  },\n  },\n  {\n    method: \"GET\",\n    path: \"/config\",\n    handler: \"config.getFullConfig\",\n    config: { policies: [], auth: false },\n  },\n  {\n    method: 'GET',\n    path: '/core/:coreEmailType',\n    handler: 'designer.getCoreEmailType',\n    config: { policies: [], auth: false  },\n  },\n  {\n    method: 'POST',\n    path: '/core/:coreEmailType',\n    handler: 'designer.saveCoreEmailType',\n    config: { policies: [], auth: false  },\n  },\n  {\n    method: 'GET',\n    path: '/generate-pdf/:templateReferenceId',\n    handler: 'pdf.generate',\n    config: { policies: [], auth: false  },\n  }\n  // {\n  //   method: \"GET\",\n  //   path: \"/download/:id\",\n  //   handler: \"designer.download\",\n  //   config: { policies: [], auth: false },\n  // },\n];\n","/**\n * email-designer.js service\n *\n * @description: A set of functions similar to controller's actions to avoid code duplication.\n */\n\nimport { Core } from '@strapi/strapi';\n\nexport interface TemplateParams {\n  [key: string]: any;\n}\n\nexport interface TemplateValues {\n  [key: string]: any;\n}\n\nexport interface TemplateService {\n  findOne(params: TemplateParams): Promise<any>;\n  findMany(params: TemplateParams): Promise<any[]>;\n  create(values: TemplateValues): Promise<any>;\n  update(params: TemplateParams, values: TemplateValues): Promise<any>;\n  delete(params: TemplateParams): Promise<any>;\n}\n\nexport default ({ strapi }: { strapi: Core.Strapi }): TemplateService => {\n  return {\n    /**\n     * Promise to fetch a template.\n     * @return {Promise}\n     */\n    async findOne(params: TemplateParams) {\n      try {\n        const response = await strapi.query('plugin::pdf-designer-5.pdf-template').findOne({ where: params });\n        if (!response) {\n          console.log('An error has occurred');\n        }\n        return response;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    /**\n     * Promise to fetch all templates.\n     * @return {Promise}\n     */\n    async findMany(params: TemplateParams) {\n      try {\n        const response = await strapi.query('plugin::pdf-designer-5.pdf-template').findMany({ where: params });\n        if (!response) {\n          throw new Error('No templates found');\n        }\n        return response;\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    },\n\n    /**\n     * Promise to add a template.\n     * @return {Promise}\n     */\n    async create(values: TemplateValues) {\n      try {\n        const template = await strapi.query('plugin::pdf-designer-5.pdf-template').create({ data: values });\n        if (!template) {\n          throw new Error('Failed to create template');\n        }\n        return {\n          values: values,\n          templateCreate: template,\n          success: true\n        };\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    },\n\n    /**\n     * Promise to edit a template.\n     * @return {Promise}\n     */\n    async update(params: TemplateParams, values: TemplateValues) {\n      try {\n        const response = await strapi.query('plugin::pdf-designer-5.pdf-template').update({ where: params, data: values });\n        if (!response) {\n          throw new Error('Failed to update template');\n        }\n        return response;\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    },\n\n    /**\n     * Promise to remove a template.\n     * @return {Promise}\n     */\n    async delete(params: TemplateParams) {\n      try {\n        const response = await strapi.query('plugin::pdf-designer-5.pdf-template').delete({ where: params });\n        if (!response) {\n          throw new Error('Failed to delete template');\n        }\n        return response;\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    },\n  };\n};\n\n","/**\n * config.js configuration service\n */\n\nimport { Core } from '@strapi/strapi';\nimport configImport from \"../config\";\n\nexport interface ConfigService {\n  getConfig(key?: string): Record<string, any>;\n}\n\nexport default ({ strapi }: { strapi: Core.Strapi }): ConfigService => {\n  return {\n    getConfig(key = 'editor'): Record<string, any> {\n      return strapi.plugin(configImport.pluginName).config(key) ?? {};\n    },\n  };\n};","import _ from 'lodash';\nimport decode from 'decode-html';\nimport { htmlToText } from 'html-to-text';\nimport html_to_pdf from 'html-pdf-node';\nimport Mustache from \"mustache\";\n\n\nconst templateSettings = {\n  evaluate: /\\{\\{(.+?)\\}\\}/g,\n  interpolate: /\\{\\{=(.+?)\\}\\}/g,\n  escape: /\\{\\{-(.+?)\\}\\}/g,\n};\n\nexport interface PdfTemplate {\n  templateReferenceId?: string;\n  html?: string;\n  text?: string;\n  subject?: string;\n}\n\nexport interface PdfFooter {\n  footerString?: string;\n}\n\nexport interface StrapiInstance {\n  log: {\n    error: (message: string) => void;\n  };\n  db: {\n    query: (model: string) => {\n      findOne: (params: any) => Promise<any>;\n    };\n  };\n  plugins: {\n    [key: string]: {\n      config: {\n        [key: string]: any;\n      };\n    };\n  };\n}\n\n\nexport default ({ strapi }: { strapi: StrapiInstance }) => {\n  const templater = (tmpl: string) => _.template(tmpl, templateSettings);\n  const isMantainLegacyTemplateActive = () =>\n    _.get(strapi.plugins, 'pdf-designer.config.mantainLegacyTemplate', true);\n\n  /**\n   * Promise to generate a PDF.\n   * @return {Promise}\n   */\n  const generatePdf = async (pdfTemplate: PdfTemplate = {}, data: any = {}, myFooter: PdfFooter = {}) => {\n    const { templateReferenceId } = pdfTemplate;\n    const { footerString } = myFooter;\n    const attributes = ['text', 'html', 'subject'];\n\n    if (!templateReferenceId) {\n      strapi.log.error(`No template reference specified`);\n      throw new Error('No template reference specified');\n    }\n\n    try {\n      const response = await strapi.db\n        .query('plugin::pdf-designer-5.pdf-template')\n        .findOne({ where: { templateReferenceId } });\n\n      if (!response) {\n        strapi.log.error(`No pdf template found with referenceId \"${templateReferenceId}\"`);\n        throw new Error(`No pdf template found with referenceId \"${templateReferenceId}\"`);\n      }\n\n      let { bodyHtml, bodyText } = response;\n\n      if (isMantainLegacyTemplateActive()) {\n        bodyHtml = bodyHtml.replace(/<%/g, '{{').replace(/%>/g, '}}');\n        bodyText = bodyText.replace(/<%/g, '{{').replace(/%>/g, '}}');\n      }\n\n      if ((!bodyText || !bodyText.length) && bodyHtml && bodyHtml.length)\n        bodyText = htmlToText(bodyHtml, { wordwrap: 130, trimEmptyLines: true, uppercaseHeadings: false });\n\n      pdfTemplate = {\n        ...pdfTemplate,\n        html: decode(bodyHtml),\n        text: decode(bodyText),\n      };\n\n      const templatedAttributes = attributes.reduce(\n        (compiled, attribute) =>\n          pdfTemplate[attribute]\n            ? Object.assign(compiled, { [attribute]: Mustache.render(pdfTemplate[attribute], data) })\n            : compiled,\n        {} as PdfTemplate\n      );\n\n      const options = {\n        footerTemplate: footerString\n      };\n\n      const files = { content: decode(templatedAttributes.html as string) };\n      const bufferPDF = await html_to_pdf.generatePdf(files, options);\n\n      return bufferPDF;\n    } catch (error) {\n      strapi.log.error(error);\n      throw error;\n    }\n  };\n\n  return {\n    generatePdf,\n  };\n};","import template from './template';\nimport config from './config';\nimport pdf from './pdf';\n\nexport default {\n  config,\n  template,\n  pdf\n};","import bootstrap from \"./bootstrap\";\n/**\n * Plugin server methods\n */\nimport config from \"./config\";\nimport contentTypes from \"./content-types\";\nimport controllers from \"./controllers\";\nimport destroy from \"./destroy\";\nimport middlewares from \"./middlewares\";\nimport policies from \"./policies\";\nimport register from \"./register\";\nimport routes from \"./routes\";\nimport services from \"./services\";\n\nexport type { EmailConfig } from \"./config\";\n\nexport default {\n  register,\n  bootstrap,\n  destroy,\n  config,\n  controllers,\n  routes,\n  services,\n  contentTypes,\n  policies,\n  middlewares,\n};\n"],"names":["strapi","config","configImport","template","pdfTemplate","pdf","attributes","options"],"mappings":"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"}